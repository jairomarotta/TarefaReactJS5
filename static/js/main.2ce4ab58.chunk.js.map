{"version":3,"sources":["Temas.js","GlobalStyle.js","Toogle.js","App.js","reportWebVitals.js","index.js"],"names":["TemaClaro","body","text","borda","inputBackgroundColor","inputBorder","inputTextColor","buttonBackgroundColor","buttonBorder","buttonTextColor","TemaEscuro","GlobalLayout","createGlobalStyle","theme","Button","styled","button","buttonBackGroundColor","Toogle","themeLabel","toogleTheme","onClick","App","props","OpcaoTema","state","Tema","setState","TemaPagina","this","id","type","defaultValue","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAAaA,EAAY,CACrBC,KAAM,UACNC,KAAM,UACNC,MAAO,UAEPC,qBAAsB,UACtBC,YAAa,UACbC,eAAgB,UAEhBC,sBAAuB,UACvBC,aAAc,UACdC,gBAAiB,WAGRC,EAAa,CACtBT,KAAM,UACNC,KAAM,UACNC,MAAO,UAEPC,qBAAsB,UACtBC,YAAa,UACbC,eAAgB,UAEhBC,sBAAuB,UACvBC,aAAc,UACdC,gBAAiB,W,inCCvBd,IAAME,EAAeC,YAAH,KAGN,qBAAEC,MAAiBZ,QAOnB,qBAAEY,MAAiBT,wBAClB,qBAAES,MAAiBR,eAC1B,qBAAEQ,MAAiBP,kBAQZ,qBAAEO,MAAiBL,gBAQpB,qBAAEK,MAAiBN,yBACzB,qBAAEM,MAAiBJ,mBAQZ,qBAAEI,MAAiBL,gBAUlB,qBAAEK,MAAiBV,SAM3B,qBAAEU,MAAiBX,Q,8GCpDhC,IAAMY,EAASC,IAAOC,OAAV,KACO,qBAAEH,MAAiBI,yBACxB,qBAAEJ,MAAiBL,gBAWlBU,EARA,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,YAC1B,OACI,cAACN,EAAD,CAAQO,QAASD,EAAjB,SACKD,KC6CEG,E,kDA9Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,UAAY,WACa,eAApB,EAAKC,MAAMC,KACV,EAAKC,SAAS,CACZC,WAAY,cACZF,KAAM,gBAGR,EAAKC,SAAS,CACZC,WAAY,aACZF,KAAM,gBAfZ,EAAKD,MAAQ,CACXG,WAAY,aACZF,KAAM,cALS,E,qDAwBjB,OACE,eAAC,IAAD,CAAeb,MAAgC,cAAzBgB,KAAKJ,MAAMG,WAA6B5B,EAAYU,EAA1E,UACE,cAACC,EAAD,IACI,qBAAKmB,GAAG,YAAR,SACI,sBAAKA,GAAG,WAAR,UACI,8BACI,cAAC,EAAD,CAAQX,WAAYU,KAAKJ,MAAMC,KAAMN,YAAaS,KAAKL,cAE3D,8BACI,mBAAGM,GAAG,QAAN,0CAEJ,gCACI,uBAAOC,KAAK,OAAOC,aAAa,6BAChC,4D,GAvCNC,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2ce4ab58.chunk.js","sourcesContent":["export const TemaClaro = {\r\n    body: '#F0FFFF',\r\n    text: '#000000',\r\n    borda: '#000000',\r\n\r\n    inputBackgroundColor: '#F0FFFF',\r\n    inputBorder: '#000000',\r\n    inputTextColor: '#000000',\r\n\r\n    buttonBackgroundColor: '#1C1C1C',\r\n    buttonBorder: '#1C1C1C',\r\n    buttonTextColor: '#F0FFFF',\r\n}\r\n\r\nexport const TemaEscuro = {\r\n    body: '#363636',\r\n    text: '#F0FFFF',\r\n    borda: '#F0FFFF',\r\n\r\n    inputBackgroundColor: '#3b3b3b',\r\n    inputBorder: '#F0FFFF',\r\n    inputTextColor: '#F0FFFF',\r\n\r\n    buttonBackgroundColor: '#F0FFFF',\r\n    buttonBorder: '#F0FFFF',\r\n    buttonTextColor: '#000000',\r\n}","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalLayout = createGlobalStyle`\r\n\r\nbody {\r\n    background : ${({theme}) => theme.body };\r\n    transition: all 0.20s linear;\r\n    font-weight: bolder;\r\n\tfont-size: x-large;\r\n}\r\n\r\ninput {\r\n    background : ${({theme}) => theme.inputBackgroundColor };  \r\n    border: solid ${({theme}) => theme.inputBorder } 1;  \r\n    color: ${({theme}) => theme.inputTextColor };\r\n    transition: all 0.20s linear;\r\n    -webkit-border-radius: 0;\r\n    -moz-border-radius: 0;\r\n    border-radius: 0;\r\n    font-family: Open Sans;\r\n    font-size: 20px;\r\n    font-weight: 30;\r\n    border: solid ${({theme}) => theme.buttonBorder };\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    text-align: center; \r\n}\r\n\r\nbutton {\r\n    background : ${({theme}) => theme.buttonBackgroundColor };\r\n    color: ${({theme}) => theme.buttonTextColor };\r\n    transition: all 0.20s linear;\r\n    -webkit-border-radius: 0;\r\n    -moz-border-radius: 0;\r\n    border-radius: 0;\r\n    font-family: Open Sans;\r\n    font-size: 20px;\r\n    font-weight: 30;\r\n    border: solid ${({theme}) => theme.buttonBorder };\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    text-align: center;   \r\n}\r\n\r\n#conteudo {\r\n\twidth: 552px;\r\n\tmin-height: 250px;\r\n\tborder: 1px solid ${({theme}) => theme.borda };;\r\n\ttext-align: center;\r\n\tpadding-top: 90px;\r\n}\r\n\r\n#texto{\r\n    color: ${({theme}) => theme.text };\r\n}\r\n\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n    background : ${({theme}) => theme.buttonBackGroundColor }\r\n    border: ${({theme}) => theme.buttonBorder }\r\n`;\r\n\r\nconst Toogle = ({ themeLabel, toogleTheme}) => {\r\n    return(\r\n        <Button onClick={toogleTheme} >\r\n            {themeLabel}\r\n        </Button>      \r\n    );\r\n};\r\n\r\nexport default Toogle;","import './App.css';\nimport React, {Component} from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { TemaClaro, TemaEscuro} from './Temas';\nimport { GlobalLayout } from './GlobalStyle';\nimport Toogle from './Toogle';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);  \n    \n    this.state = {\n      TemaPagina: 'Tema Claro',\n      Tema: 'Tema Claro'\n    };\n  }   \n\n  OpcaoTema = () => {\n    if(this.state.Tema === 'Tema Claro'){\n        this.setState({\n          TemaPagina: 'Tema Escuro',\n          Tema: 'Tema Escuro'\n        });\n    }else{\n        this.setState({\n          TemaPagina: 'Tema Claro',\n          Tema: 'Tema Claro'\n        });\n    }\n  }\n\n  render(){    \n    return (\n      <ThemeProvider theme={this.state.TemaPagina == 'Tema Claro' ? TemaClaro : TemaEscuro}>\n        <GlobalLayout />\n            <div id=\"principal\">\n                <div id=\"conteudo\">\n                    <div>\n                        <Toogle themeLabel={this.state.Tema} toogleTheme={this.OpcaoTema} />\n                    </div>      \n                    <div>\n                        <p id=\"texto\"> Sign up to my newsletter </p>\n                    </div>\n                    <div>\n                        <input type=\"text\" defaultValue=\"jairomarotta@hotmail.com\"/>\n                        <button>Sign Up</button>              \n                    </div>          \n                </div>          \n            </div>\n      </ThemeProvider>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}